import 'dotenv/config';
import {
  createEcdsaKernelMigrationAccount,
  signerToEcdsaValidator,
} from '@zerodev/ecdsa-validator';
import {
  createKernelAccount,
  createKernelAccountClient,
  createZeroDevPaymasterClient,
} from '@zerodev/sdk';
import { getKernelVersion } from '@zerodev/sdk/actions';
import { KERNEL_V3_0, KERNEL_V3_1 } from '@zerodev/sdk/constants';
import { http, Address, Hex, createPublicClient, zeroAddress } from 'viem';
import {
  EntryPointVersion,
  entryPoint07Address,
} from 'viem/account-abstraction';
import { generatePrivateKey, privateKeyToAccount } from 'viem/accounts';
import { sepolia } from 'viem/chains';

if (!process.env.ZERODEV_RPC || !process.env.PRIVATE_KEY) {
  throw new Error('ZERODEV_RPC or PRIVATE_KEY is not set');
}

const chain = sepolia;
const publicClient = createPublicClient({
  transport: http(process.env.ZERODEV_RPC),
  chain,
});

const signer = privateKeyToAccount(generatePrivateKey() as Hex);
const entryPoint = {
  address: entryPoint07Address as Address,
  version: '0.7' as EntryPointVersion,
};

const main = async () => {
  const originalKernelVersion = KERNEL_V3_0;
  const ecdsaValidator = await signerToEcdsaValidator(publicClient, {
    signer,
    entryPoint,
    kernelVersion: originalKernelVersion,
  });

  const account = await createKernelAccount(publicClient, {
    plugins: {
      sudo: ecdsaValidator,
    },
    entryPoint,
    kernelVersion: originalKernelVersion,
  });
  console.log('My account:', account.address);

  const paymasterClient = createZeroDevPaymasterClient({
    chain,
    transport: http(process.env.ZERODEV_RPC),
  });
  const kernelClient = createKernelAccountClient({
    account,
    chain,
    bundlerTransport: http(process.env.ZERODEV_RPC),
    client: publicClient,
    paymaster: {
      getPaymasterData: (userOperation) => {
        return paymasterClient.sponsorUserOperation({
          userOperation,
        });
      },
    },
  });

  // Sending a dummy transaction just to deploy the account but not not needed for the migration
  // If the account is not deployed, the migration will still keep the same address as the one generated by the original kernel version
  // but the kernel version will be the migrated one
  const txHash = await kernelClient.sendTransaction({
    to: zeroAddress,
    value: BigInt(0),
    data: '0x',
  });
  console.log('txHash:', txHash);

  const kernelVersion = await getKernelVersion(publicClient, {
    address: account.address,
  });
  console.log('Kernel version before migration:', kernelVersion);

  const migrationVersion = KERNEL_V3_1;

  const migrationAccount = await createEcdsaKernelMigrationAccount(
    publicClient,
    {
      entryPoint,
      signer,
      migrationVersion: {
        from: originalKernelVersion,
        to: migrationVersion,
      },
    }
  );

  const migrationKernelClient = createKernelAccountClient({
    account: migrationAccount,
    chain,
    bundlerTransport: http(process.env.ZERODEV_RPC),
    client: publicClient,
    paymaster: {
      getPaymasterData: (userOperation) => {
        return paymasterClient.sponsorUserOperation({
          userOperation,
        });
      },
    },
  });

  // The first transaction from the migration account will be the one that will migrate the account
  const migrationTxHash = await migrationKernelClient.sendTransaction({
    to: zeroAddress,
    value: BigInt(0),
    data: '0x',
  });
  console.log('migrationTxHash:', migrationTxHash);

  const migrationKernelVersion = await getKernelVersion(publicClient, {
    address: migrationAccount.address,
  });
  console.log('Kernel version after migration:', migrationKernelVersion);
};

main();
